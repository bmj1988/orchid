
dev notes = {

repo url => https://github.com/bmj1988/orchid

you'll want localtunnel to connect the mobile client to the backend. when it's globally installed the command "lt -p {backend port} -s {subdomain name, I reccomend "tulip"}"
this will generate a standardized URL that you can include in the env for your frontend.

npm i on frontend (tulip) and backend (backend) and you should be ready for testing. I will leave .env.examples for what your .env should look like.


after you've created a github, clone the project from the current repo on my account, and I will delete the one I have, so that you have sole ownership of the code (which you will have to make private to keep anyone else from just cloning it)

a good place to start getting familiarity with the codebase would be to write API documentation.

build out the error handling

there are a number of frontend functions that essentially use for loops. this can be solved by either expanding the redux store, or in many cases just normalizing data in the existing slices of state. most pages survive a refresh but you will want either a context or layout to keep the user in store. you are essentially converting a demo model in a production level app so there will be many suboptimal elements to refactor.

construct a formal ticket system for feedback

concentrate on making the feed feel sticky, to do this you will have to introduce a "type" attribute to quotes and figure out how to accurately ascribe a type.

figure out a system for "sending" quotes. the user doesn't have an inbox, i am more of the mind that a send should send to one of the users walls by choice.

what should searchbar return? quotes in a feed that are related to the query? a
results page? what is the structure of the return? I lean toward the first.

as it exists now, if you follow someone you just follow them, there are no requests to approve. this would require an entirely separate screen as well as a model for FollowRequests.

}
